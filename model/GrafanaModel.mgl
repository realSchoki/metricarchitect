import "model/FloorModel.mgl" as FloorModel

@style("model/General.style")
@primeviewer
graphModel GrafanaModel {
	package dev.schoki.metricarchitect.model.grafana
	nsURI "http://cinco.scce.info/product/metricarchitect/model/grafana"
	diagramExtension "grafana"
	
	attr EString as name
	
	enum Aggregation {
		none
		sum
		min
		max
		avg
		group
		stddev
		stdvar
		count
		count_values
		bottomk
		topk
		quantile
	}
	
	@style(graphQuery, "${name}")
	@icon('src/main/resources/icons/chart-line-solid.16.png')
	node GraphQueryForGroup {
		@pvLabel (name)
     	@pvFileExtension ("floor")
     	prime FloorModel::DeviceGroup as deviceGroup
		outgoingEdges (GraphQueryToPanel)
		attr EString as name := ""
	}
	
	
	@style(graphQuery, "${name}")
	@icon('src/main/resources/icons/chart-line-solid.16.png')
	node GraphQueryForDevice {
		@pvLabel (name)
     	@pvFileExtension ("floor")
     	prime FloorModel::Device as device
		outgoingEdges (GraphQueryToPanel)
		attr EString as name := ""
	}
	
	@style(panel, "${name}")
	@icon('src/main/resources/icons/chalkboard-solid.16.png')
	node Panel {
		incomingEdges (GraphQueryToPanel)
		outgoingEdges (PanelToDashboard)
		attr EString as name := ""
	}
	
	@style(dashboard, "${name}")
	@icon('src/main/resources/icons/list-alt-regular.16.png')
	@postCreate('dev.schoki.metricarchitect.hooks.grafanamodel.DashboardPostCreateSetUniqueId')
	node Dashboard {
		incomingEdges (PanelToDashboard)
		attr EString as name := ""
		final unique attr EString as internal_id := " " 
	}
	
	@style(simpleArrow)
	edge GraphQueryToPanel {
		@possibleValuesProvider("dev.schoki.metricarchitect.provider.FilterValueProvider")
		attr EString as filter
		attr Aggregation as function := "none"
		attr EString as offset
		attr EString as timespan
		attr EString as timeresolution
		attr EString as label
	}
	
	@style(simpleArrow)
	edge PanelToDashboard {
	}
}

